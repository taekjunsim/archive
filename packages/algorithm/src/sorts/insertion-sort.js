// [4, 3, 2, 1, 5, -5, 20, 17]

// 삽입정렬: 작은 수와 큰 수 사이에 삽입하는 방법
// 다시 구현해보기
export function insertionSort(arr) {
  for (let i = 1; i < arr.length; i++) {
    let currentVal = arr[i];
    // i = 1(4),
    // i = 2(2),
    // i = 3(1),
    // i = 4(5),
    // i = 5(-5),
    // i = 6(20),
    // i = 7(17),
    let j;
    for (j = i - 1; j >= 0 && arr[j] > currentVal; j--) {
      arr[j + 1] = arr[j];
      // 4  // [4, 3, 2, 1, 5, -5, 20, 17] // j = 0([4, 4, 2, 1, 5, -5, 20, 17]),
      // 2  // [3, 4, 2, 1, 5, -5, 20, 17] // j = 1([3, 4, 4, 1, 5, -5, 20, 17]), j = 0([3, 3, 4, 1, 5, -5, 20, 17])
      // 1  // [2, 3, 4, 1, 5, -5, 20, 17] // j = 2([2, 3, 4, 4, 5, -5, 20, 17]), j = 1([2, 3, 3, 4, 5, -5, 20, 17]), j = 0([[2, 2, 3, 4, 5, -5, 20, 17]])
      // 5  // [1, 2, 3, 4, 5, -5, 20, 17] // j = 3
      // -5 // [1, 2, 3, 4, 5, -5, 20, 17] // j = 4([1, 2, 3, 4, 5, 5, 20, 17]), j = 3([1, 2, 3, 4, 4, 5, 20, 17]),  j = 2([1, 2, 3, 3, 4, 5, 20, 17]), j = 1([1, 2, 2, 3, 4, 5, 20, 17]), j = 0([1, 1, 2, 3, 4, 5, 20, 17])
      // 20 // [-5, 1, 2, 3, 4, 5, 20, 17] // j = 5
      // 17 // [-5, 1, 2, 3, 4, 5, 20, 17] // j = 6([-5, 1, 2, 3, 4, 5, 20, 20]) // j = 5
    }
    arr[j + 1] = currentVal;
    // j = -1([3, 4, 2, 1, 5, -5, 20, 17]),
    // j = -1([2, 3, 4, 1, 5, -5, 20, 17]),
    // j = -1([1, 2, 3, 4, 5, -5, 20, 17]),
    // j = 3([1, 2, 3, 4, 5, -5, 20, 17]),
    // j = -1([-5, 1, 2, 3, 4, 5, 20, 17]),
    // j = 5([-5, 1, 2, 3, 4, 5, 20, 17]),
    // j = 5([-5, 1, 2, 3, 4, 5, 17, 20])
  }
  return arr;
}
