/**
 * 분수 찾기 (1 <= x <= 10,000,000)
 * 1/1, 1/2, 1/3, 1/4, ...
 * 2/1, 2/2, 2/3, ...
 * 3/1, 3/2, ...
 * 4/1, ...
 * 5/1, ...
 * 6/1, ...
 *
 * 규칙을 찾는 것이 핵심
 */

const findFraction = () => {
  const x: number = 11;
  let sum = 0;
  let n = 1;

  while (sum < x) {
    n++;
    sum = (n * (n + 1)) / 2;
  }

  // sum은 x보다 크다. sum - x = a일 때 짝수에서는 (분자-a)/(분모+a) 홀수에서는 (분자+a)/(분모-a)
  const diff = sum - x;

  console.log(
    x === 1
      ? "1/1"
      : n % 2 === 0
      ? `${n - diff}/${1 + diff}`
      : `${1 + diff}/${n - diff}`
  );
};

/**
 * 1/1(1), 1/2(2), 1/3(6), 1/4(7),
 * 2/1(3), 2/2(5), 2/3(8)
 * 3/1(4), 3/2(9)
 * 4/1(10)
 * 5/1(11)
 * 6/1(21)
 *
 * 핵심규칙: 순서(x)가 n까지의 합(n*(n + 1)/2)과 일치할 때, n이 홀수면 열의 첫 번째이고 짝수면 행의 첫 번째이다.
 * n = 1, 1/1
 * n = 2, 2/1, sum = 3
 * n = 3, 1/3, sum = 6
 * n = 4, 4/1, sum = 10
 * n = 5, 1/5, sum = 15
 */
