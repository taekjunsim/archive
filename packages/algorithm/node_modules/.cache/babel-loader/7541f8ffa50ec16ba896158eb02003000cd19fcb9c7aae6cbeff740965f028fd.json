{"ast":null,"code":"// [4, 3, 2, 1, 5, -5, 20, 17]\n\n// 삽입정렬: 작은 수와 큰 수 사이에 삽입하는 방법\n// 다시 구현해보기\nexport function insertionSort(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    let currentVal = arr[i];\n    // i = 1(4),\n    // i = 2(2),\n    // i = 3(1),\n    // i = 4(5),\n    // i = 5(-5),\n    // i = 6(20),\n    // i = 7(17),\n    let j;\n    for (j = i - 1; j >= 0 && arr[j] > currentVal; j--) {\n      arr[j + 1] = arr[j];\n      // 4  // [4, 3, 2, 1, 5, -5, 20, 17] // j = 0([4, 4, 2, 1, 5, -5, 20, 17]),\n      // 2  // [3, 4, 2, 1, 5, -5, 20, 17] // j = 1([3, 4, 4, 1, 5, -5, 20, 17]), j = 0([3, 3, 4, 1, 5, -5, 20, 17])\n      // 1  // [2, 3, 4, 1, 5, -5, 20, 17] // j = 2([2, 3, 4, 4, 5, -5, 20, 17]), j = 1([2, 3, 3, 4, 5, -5, 20, 17]), j = 0([[2, 2, 3, 4, 5, -5, 20, 17]])\n      // 5  // [1, 2, 3, 4, 5, -5, 20, 17] // j = 3\n      // -5 // [1, 2, 3, 4, 5, -5, 20, 17] // j = 4([1, 2, 3, 4, 5, 5, 20, 17]), j = 3([1, 2, 3, 4, 4, 5, 20, 17]),  j = 2([1, 2, 3, 3, 4, 5, 20, 17]), j = 1([1, 2, 2, 3, 4, 5, 20, 17]), j = 0([1, 1, 2, 3, 4, 5, 20, 17])\n      // 20 // [-5, 1, 2, 3, 4, 5, 20, 17] // j = 5\n      // 17 // [-5, 1, 2, 3, 4, 5, 20, 17] // j = 6([-5, 1, 2, 3, 4, 5, 20, 20]) // j = 5\n    }\n    arr[j + 1] = currentVal;\n    // j = -1([3, 4, 2, 1, 5, -5, 20, 17]),\n    // j = -1([2, 3, 4, 1, 5, -5, 20, 17]),\n    // j = -1([1, 2, 3, 4, 5, -5, 20, 17]),\n    // j = 3([1, 2, 3, 4, 5, -5, 20, 17]),\n    // j = -1([-5, 1, 2, 3, 4, 5, 20, 17]),\n    // j = 5([-5, 1, 2, 3, 4, 5, 20, 17]),\n    // j = 5([-5, 1, 2, 3, 4, 5, 17, 20])\n  }\n  return arr;\n}","map":{"version":3,"names":["insertionSort","arr","i","length","currentVal","j"],"sources":["/Users/taekjunsim/Desktop/project/archive/packages/algorithm/src/util/sorts/insertionSort.js"],"sourcesContent":["// [4, 3, 2, 1, 5, -5, 20, 17]\n\n// 삽입정렬: 작은 수와 큰 수 사이에 삽입하는 방법\n// 다시 구현해보기\nexport function insertionSort(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    let currentVal = arr[i];\n    // i = 1(4),\n    // i = 2(2),\n    // i = 3(1),\n    // i = 4(5),\n    // i = 5(-5),\n    // i = 6(20),\n    // i = 7(17),\n    let j;\n    for (j = i - 1; j >= 0 && arr[j] > currentVal; j--) {\n      arr[j + 1] = arr[j];\n      // 4  // [4, 3, 2, 1, 5, -5, 20, 17] // j = 0([4, 4, 2, 1, 5, -5, 20, 17]),\n      // 2  // [3, 4, 2, 1, 5, -5, 20, 17] // j = 1([3, 4, 4, 1, 5, -5, 20, 17]), j = 0([3, 3, 4, 1, 5, -5, 20, 17])\n      // 1  // [2, 3, 4, 1, 5, -5, 20, 17] // j = 2([2, 3, 4, 4, 5, -5, 20, 17]), j = 1([2, 3, 3, 4, 5, -5, 20, 17]), j = 0([[2, 2, 3, 4, 5, -5, 20, 17]])\n      // 5  // [1, 2, 3, 4, 5, -5, 20, 17] // j = 3\n      // -5 // [1, 2, 3, 4, 5, -5, 20, 17] // j = 4([1, 2, 3, 4, 5, 5, 20, 17]), j = 3([1, 2, 3, 4, 4, 5, 20, 17]),  j = 2([1, 2, 3, 3, 4, 5, 20, 17]), j = 1([1, 2, 2, 3, 4, 5, 20, 17]), j = 0([1, 1, 2, 3, 4, 5, 20, 17])\n      // 20 // [-5, 1, 2, 3, 4, 5, 20, 17] // j = 5\n      // 17 // [-5, 1, 2, 3, 4, 5, 20, 17] // j = 6([-5, 1, 2, 3, 4, 5, 20, 20]) // j = 5\n    }\n    arr[j + 1] = currentVal;\n    // j = -1([3, 4, 2, 1, 5, -5, 20, 17]),\n    // j = -1([2, 3, 4, 1, 5, -5, 20, 17]),\n    // j = -1([1, 2, 3, 4, 5, -5, 20, 17]),\n    // j = 3([1, 2, 3, 4, 5, -5, 20, 17]),\n    // j = -1([-5, 1, 2, 3, 4, 5, 20, 17]),\n    // j = 5([-5, 1, 2, 3, 4, 5, 20, 17]),\n    // j = 5([-5, 1, 2, 3, 4, 5, 17, 20])\n  }\n  return arr;\n}\n"],"mappings":"AAAA;;AAEA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,GAAG,EAAE;EACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,GAAG,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAIE,UAAU,GAAGH,GAAG,CAACC,CAAC,CAAC;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIG,CAAC;IACL,KAAKA,CAAC,GAAGH,CAAC,GAAG,CAAC,EAAEG,CAAC,IAAI,CAAC,IAAIJ,GAAG,CAACI,CAAC,CAAC,GAAGD,UAAU,EAAEC,CAAC,EAAE,EAAE;MAClDJ,GAAG,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGJ,GAAG,CAACI,CAAC,CAAC;MACnB;MACA;MACA;MACA;MACA;MACA;MACA;IACF;IACAJ,GAAG,CAACI,CAAC,GAAG,CAAC,CAAC,GAAGD,UAAU;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;EACF;EACA,OAAOH,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}