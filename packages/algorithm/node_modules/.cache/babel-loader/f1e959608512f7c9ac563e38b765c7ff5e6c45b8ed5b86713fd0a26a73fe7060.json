{"ast":null,"code":"// 3 <= n <= 100\n// 0 <= k <= 1000\n\n// n = 4, arr = [1, 3, 1, 5]\nfunction myAnswer(n, arr) {\n  let result = 0;\n  console.time(\"my answer\");\n  for (let i = 0; i < n - 1; i++) {\n    if (arr[i] > result) {\n      result = arr[i];\n    }\n    for (let j = i + 2; j < n; j++) {\n      if (arr[i] + arr[j] > result) {\n        result = arr[i] + arr[j];\n      }\n    }\n  }\n  console.log(result);\n  console.timeEnd(\"my answer\");\n  return result;\n}\nfunction dp(n, arr) {\n  let d = new Array(n).fill(0);\n  d[0] = arr[0];\n  d[1] = Math.max(arr[0], arr[1]);\n  console.time(\"dp\");\n  for (let i = 2; i < n; i++) {\n    console.log(i, d[i - 2], Math.max(d[i - 1], d[i - 2] + arr[i]));\n    console.log(d);\n    // console.log(d, d[i - 1], d[i - 2], arr[i]);\n    d[i] = Math.max(d[i - 1], d[i - 2] + arr[i]);\n    console.log(d);\n  }\n\n  // console.log(d);\n\n  console.timeEnd(\"dp\");\n  return d[n - 1];\n}\nexport const soldierAnts = {\n  mine: myAnswer,\n  dp\n};\n\n// i = 2, d = [1, 2, 1+2, 0, 0, 0, 0, 0, 0, 0]\n// i = 3, d = [1, 2, 3, 2+3, 0, 0, 0, 0, 0, 0]","map":{"version":3,"names":["myAnswer","n","arr","result","console","time","i","j","log","timeEnd","dp","d","Array","fill","Math","max","soldierAnts","mine"],"sources":["/Users/taekjunsim/Desktop/project/archive/packages/algorithm/src/questions/dp/soldierAnts.js"],"sourcesContent":["// 3 <= n <= 100\n// 0 <= k <= 1000\n\n// n = 4, arr = [1, 3, 1, 5]\nfunction myAnswer(n, arr) {\n  let result = 0;\n\n  console.time(\"my answer\");\n  for (let i = 0; i < n - 1; i++) {\n    if (arr[i] > result) {\n      result = arr[i];\n    }\n\n    for (let j = i + 2; j < n; j++) {\n      if (arr[i] + arr[j] > result) {\n        result = arr[i] + arr[j];\n      }\n    }\n  }\n\n  console.log(result);\n  console.timeEnd(\"my answer\");\n  return result;\n}\n\nfunction dp(n, arr) {\n  let d = new Array(n).fill(0);\n\n  d[0] = arr[0];\n  d[1] = Math.max(arr[0], arr[1]);\n\n  console.time(\"dp\");\n  for (let i = 2; i < n; i++) {\n    console.log(i, d[i - 2], Math.max(d[i - 1], d[i - 2] + arr[i]));\n    console.log(d);\n    // console.log(d, d[i - 1], d[i - 2], arr[i]);\n    d[i] = Math.max(d[i - 1], d[i - 2] + arr[i]);\n    console.log(d);\n  }\n\n  // console.log(d);\n\n  console.timeEnd(\"dp\");\n  return d[n - 1];\n}\n\nexport const soldierAnts = {\n  mine: myAnswer,\n  dp,\n};\n\n// i = 2, d = [1, 2, 1+2, 0, 0, 0, 0, 0, 0, 0]\n// i = 3, d = [1, 2, 3, 2+3, 0, 0, 0, 0, 0, 0]\n"],"mappings":"AAAA;AACA;;AAEA;AACA,SAASA,QAAQA,CAACC,CAAC,EAAEC,GAAG,EAAE;EACxB,IAAIC,MAAM,GAAG,CAAC;EAEdC,OAAO,CAACC,IAAI,CAAC,WAAW,CAAC;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,GAAG,CAAC,EAAEK,CAAC,EAAE,EAAE;IAC9B,IAAIJ,GAAG,CAACI,CAAC,CAAC,GAAGH,MAAM,EAAE;MACnBA,MAAM,GAAGD,GAAG,CAACI,CAAC,CAAC;IACjB;IAEA,KAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGN,CAAC,EAAEM,CAAC,EAAE,EAAE;MAC9B,IAAIL,GAAG,CAACI,CAAC,CAAC,GAAGJ,GAAG,CAACK,CAAC,CAAC,GAAGJ,MAAM,EAAE;QAC5BA,MAAM,GAAGD,GAAG,CAACI,CAAC,CAAC,GAAGJ,GAAG,CAACK,CAAC,CAAC;MAC1B;IACF;EACF;EAEAH,OAAO,CAACI,GAAG,CAACL,MAAM,CAAC;EACnBC,OAAO,CAACK,OAAO,CAAC,WAAW,CAAC;EAC5B,OAAON,MAAM;AACf;AAEA,SAASO,EAAEA,CAACT,CAAC,EAAEC,GAAG,EAAE;EAClB,IAAIS,CAAC,GAAG,IAAIC,KAAK,CAACX,CAAC,CAAC,CAACY,IAAI,CAAC,CAAC,CAAC;EAE5BF,CAAC,CAAC,CAAC,CAAC,GAAGT,GAAG,CAAC,CAAC,CAAC;EACbS,CAAC,CAAC,CAAC,CAAC,GAAGG,IAAI,CAACC,GAAG,CAACb,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC;EAE/BE,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,EAAEK,CAAC,EAAE,EAAE;IAC1BF,OAAO,CAACI,GAAG,CAACF,CAAC,EAAEK,CAAC,CAACL,CAAC,GAAG,CAAC,CAAC,EAAEQ,IAAI,CAACC,GAAG,CAACJ,CAAC,CAACL,CAAC,GAAG,CAAC,CAAC,EAAEK,CAAC,CAACL,CAAC,GAAG,CAAC,CAAC,GAAGJ,GAAG,CAACI,CAAC,CAAC,CAAC,CAAC;IAC/DF,OAAO,CAACI,GAAG,CAACG,CAAC,CAAC;IACd;IACAA,CAAC,CAACL,CAAC,CAAC,GAAGQ,IAAI,CAACC,GAAG,CAACJ,CAAC,CAACL,CAAC,GAAG,CAAC,CAAC,EAAEK,CAAC,CAACL,CAAC,GAAG,CAAC,CAAC,GAAGJ,GAAG,CAACI,CAAC,CAAC,CAAC;IAC5CF,OAAO,CAACI,GAAG,CAACG,CAAC,CAAC;EAChB;;EAEA;;EAEAP,OAAO,CAACK,OAAO,CAAC,IAAI,CAAC;EACrB,OAAOE,CAAC,CAACV,CAAC,GAAG,CAAC,CAAC;AACjB;AAEA,OAAO,MAAMe,WAAW,GAAG;EACzBC,IAAI,EAAEjB,QAAQ;EACdU;AACF,CAAC;;AAED;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}