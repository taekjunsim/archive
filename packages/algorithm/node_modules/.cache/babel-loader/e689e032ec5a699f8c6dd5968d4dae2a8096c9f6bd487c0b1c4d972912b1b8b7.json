{"ast":null,"code":"/**\n * 금광\n *  nm = 금광 넓이 (1 <= n, m <= 20)\n *  count = 각 금광에 매장된 금의 개수 (1 <= count <= 100)\n */\n\n/**\n * [\n *   [1, 3, 3, 1],\n *   [2, 1, 4, 1],\n *   [0, 6, 4, 7]\n * ]\n *\n * n(행)이 모두 이동한 후에 m(열)이 하나씩 이동\n * up&down은 n이 변경, left는 m이 변경\n * n의 index가 0일 때 leftUp은 0\n * n의 index가 n - 1일 때 leftDown은 0\n */\n\nfunction goldMine(nm, count) {\n  const [n, m] = nm.split(\" \");\n  const countArr = count.split(\" \");\n  const arr = [];\n  const intN = Number(n);\n  const intM = Number(m);\n  for (let i = 0; i < countArr.length / m; i++) {\n    const startIndex = i * m;\n    arr.push(countArr.slice(startIndex, startIndex + intM));\n  }\n  for (let j = 1; j < intM; j++) {\n    for (let i = 0; i < intN; i++) {\n      let leftDown = 0;\n      let left = Number(arr[i][j]) + Number(arr[i][j - 1]);\n      let leftUp = 0;\n      if (i !== 0) {\n        leftUp = Number(arr[i][j]) + Number(arr[i - 1][j - 1]);\n      }\n      if (i !== n - 1) {\n        leftDown = Number(arr[i][j]) + Number(arr[i + 1][j - 1]);\n      }\n      arr[i][j] = Math.max(leftDown, left, leftUp);\n    }\n  }\n  return Math.max(arr[n]);\n}\nexport default goldMine;","map":{"version":3,"names":["goldMine","nm","count","n","m","split","countArr","arr","intN","Number","intM","i","length","startIndex","push","slice","j","leftDown","left","leftUp","Math","max"],"sources":["/Users/taekjunsim/Desktop/project/archive/packages/algorithm/src/questions/dp/goldMine.js"],"sourcesContent":["/**\n * 금광\n *  nm = 금광 넓이 (1 <= n, m <= 20)\n *  count = 각 금광에 매장된 금의 개수 (1 <= count <= 100)\n */\n\n/**\n * [\n *   [1, 3, 3, 1],\n *   [2, 1, 4, 1],\n *   [0, 6, 4, 7]\n * ]\n *\n * n(행)이 모두 이동한 후에 m(열)이 하나씩 이동\n * up&down은 n이 변경, left는 m이 변경\n * n의 index가 0일 때 leftUp은 0\n * n의 index가 n - 1일 때 leftDown은 0\n */\n\nfunction goldMine(nm, count) {\n  const [n, m] = nm.split(\" \");\n  const countArr = count.split(\" \");\n  const arr = [];\n  const intN = Number(n);\n  const intM = Number(m);\n\n  for (let i = 0; i < countArr.length / m; i++) {\n    const startIndex = i * m;\n    arr.push(countArr.slice(startIndex, startIndex + intM));\n  }\n\n  for (let j = 1; j < intM; j++) {\n    for (let i = 0; i < intN; i++) {\n      let leftDown = 0;\n      let left = Number(arr[i][j]) + Number(arr[i][j - 1]);\n      let leftUp = 0;\n\n      if (i !== 0) {\n        leftUp = Number(arr[i][j]) + Number(arr[i - 1][j - 1]);\n      }\n\n      if (i !== n - 1) {\n        leftDown = Number(arr[i][j]) + Number(arr[i + 1][j - 1]);\n      }\n\n      arr[i][j] = Math.max(leftDown, left, leftUp);\n    }\n  }\n\n  return Math.max(arr[n]);\n}\n\nexport default goldMine;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQA,CAACC,EAAE,EAAEC,KAAK,EAAE;EAC3B,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGH,EAAE,CAACI,KAAK,CAAC,GAAG,CAAC;EAC5B,MAAMC,QAAQ,GAAGJ,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC;EACjC,MAAME,GAAG,GAAG,EAAE;EACd,MAAMC,IAAI,GAAGC,MAAM,CAACN,CAAC,CAAC;EACtB,MAAMO,IAAI,GAAGD,MAAM,CAACL,CAAC,CAAC;EAEtB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,MAAM,GAAGR,CAAC,EAAEO,CAAC,EAAE,EAAE;IAC5C,MAAME,UAAU,GAAGF,CAAC,GAAGP,CAAC;IACxBG,GAAG,CAACO,IAAI,CAACR,QAAQ,CAACS,KAAK,CAACF,UAAU,EAAEA,UAAU,GAAGH,IAAI,CAAC,CAAC;EACzD;EAEA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,EAAEM,CAAC,EAAE,EAAE;IAC7B,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAEG,CAAC,EAAE,EAAE;MAC7B,IAAIM,QAAQ,GAAG,CAAC;MAChB,IAAIC,IAAI,GAAGT,MAAM,CAACF,GAAG,CAACI,CAAC,CAAC,CAACK,CAAC,CAAC,CAAC,GAAGP,MAAM,CAACF,GAAG,CAACI,CAAC,CAAC,CAACK,CAAC,GAAG,CAAC,CAAC,CAAC;MACpD,IAAIG,MAAM,GAAG,CAAC;MAEd,IAAIR,CAAC,KAAK,CAAC,EAAE;QACXQ,MAAM,GAAGV,MAAM,CAACF,GAAG,CAACI,CAAC,CAAC,CAACK,CAAC,CAAC,CAAC,GAAGP,MAAM,CAACF,GAAG,CAACI,CAAC,GAAG,CAAC,CAAC,CAACK,CAAC,GAAG,CAAC,CAAC,CAAC;MACxD;MAEA,IAAIL,CAAC,KAAKR,CAAC,GAAG,CAAC,EAAE;QACfc,QAAQ,GAAGR,MAAM,CAACF,GAAG,CAACI,CAAC,CAAC,CAACK,CAAC,CAAC,CAAC,GAAGP,MAAM,CAACF,GAAG,CAACI,CAAC,GAAG,CAAC,CAAC,CAACK,CAAC,GAAG,CAAC,CAAC,CAAC;MAC1D;MAEAT,GAAG,CAACI,CAAC,CAAC,CAACK,CAAC,CAAC,GAAGI,IAAI,CAACC,GAAG,CAACJ,QAAQ,EAAEC,IAAI,EAAEC,MAAM,CAAC;IAC9C;EACF;EAEA,OAAOC,IAAI,CAACC,GAAG,CAACd,GAAG,CAACJ,CAAC,CAAC,CAAC;AACzB;AAEA,eAAeH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}