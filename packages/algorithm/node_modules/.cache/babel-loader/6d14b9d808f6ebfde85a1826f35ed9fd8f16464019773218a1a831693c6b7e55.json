{"ast":null,"code":"// [4, 3, 2, 1, 5, -5, 20, 17]\n\n// 선택정렬: 제일 작은 수를 선택해서 가장 왼쪽으로 보내는 방법\nexport function selectionSort(arr) {\n  const result = [...arr];\n\n  // swap 방법\n  // 1. 임시 변수 선언 (currentVal)\n  result.forEach((currentVal, i) => {\n    const sliceArr = result.slice(i);\n    const min = Math.min(...sliceArr);\n    const minIndex = result.findIndex(num => num === min);\n    result[i] = min;\n    result[minIndex] = currentVal;\n  });\n\n  // 2. 구조 분해 할당\n  //    ex) const arr = [1, 2, 3, 4, 5];\n  //        [arr[1], arr[2], arr[4]] = [arr[2], arr[4], arr[1]];\n  //        1, 2, 4번 index에 원본 배열의 2, 4, 1 index의 값을 삽입\n  // for (let i = 0; i < result.length; i++) {\n  //   const sliceArr = result.slice(i);\n  //   const min = Math.min(...sliceArr);\n  //   const minIndex = result.findIndex((num) => num === min);\n\n  //   [result[i], result[minIndex]] = [min, result[i]];\n  // }\n\n  return result;\n}\n\n// [4, 3, 2, 1, 5, -5, 20, 17]\n// i = 0, [-5, 3, 2, 1, 5, 4, 20, 17]\n// i = 1, [-5, 1, 2, 3, 5, 4, 20, 17]\n// i = 2, [-5, 1, 2, 3, 5, 4, 20, 17]\n// i = 3, [-5, 1, 2, 3, 5, 4, 20, 17]\n// i = 4, [-5, 1, 2, 3, 4, 5, 20, 17]\n// i = 5, [-5, 1, 2, 3, 4, 5, 20, 17]\n// i = 6, [-5, 1, 2, 3, 4, 5, 17, 20]\n// i = 7, [-5, 1, 2, 3, 4, 5, 17, 20]","map":{"version":3,"names":["selectionSort","arr","result","forEach","currentVal","i","sliceArr","slice","min","Math","minIndex","findIndex","num"],"sources":["/Users/taekjunsim/Desktop/project/archive/packages/algorithm/src/util/sorts/selectionSort.js"],"sourcesContent":["// [4, 3, 2, 1, 5, -5, 20, 17]\n\n// 선택정렬: 제일 작은 수를 선택해서 가장 왼쪽으로 보내는 방법\nexport function selectionSort(arr) {\n  const result = [...arr];\n\n  // swap 방법\n  // 1. 임시 변수 선언 (currentVal)\n  result.forEach((currentVal, i) => {\n    const sliceArr = result.slice(i);\n    const min = Math.min(...sliceArr);\n    const minIndex = result.findIndex((num) => num === min);\n\n    result[i] = min;\n    result[minIndex] = currentVal;\n  });\n\n  // 2. 구조 분해 할당\n  //    ex) const arr = [1, 2, 3, 4, 5];\n  //        [arr[1], arr[2], arr[4]] = [arr[2], arr[4], arr[1]];\n  //        1, 2, 4번 index에 원본 배열의 2, 4, 1 index의 값을 삽입\n  // for (let i = 0; i < result.length; i++) {\n  //   const sliceArr = result.slice(i);\n  //   const min = Math.min(...sliceArr);\n  //   const minIndex = result.findIndex((num) => num === min);\n\n  //   [result[i], result[minIndex]] = [min, result[i]];\n  // }\n\n  return result;\n}\n\n// [4, 3, 2, 1, 5, -5, 20, 17]\n// i = 0, [-5, 3, 2, 1, 5, 4, 20, 17]\n// i = 1, [-5, 1, 2, 3, 5, 4, 20, 17]\n// i = 2, [-5, 1, 2, 3, 5, 4, 20, 17]\n// i = 3, [-5, 1, 2, 3, 5, 4, 20, 17]\n// i = 4, [-5, 1, 2, 3, 4, 5, 20, 17]\n// i = 5, [-5, 1, 2, 3, 4, 5, 20, 17]\n// i = 6, [-5, 1, 2, 3, 4, 5, 17, 20]\n// i = 7, [-5, 1, 2, 3, 4, 5, 17, 20]\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,SAASA,aAAaA,CAACC,GAAG,EAAE;EACjC,MAAMC,MAAM,GAAG,CAAC,GAAGD,GAAG,CAAC;;EAEvB;EACA;EACAC,MAAM,CAACC,OAAO,CAAC,CAACC,UAAU,EAAEC,CAAC,KAAK;IAChC,MAAMC,QAAQ,GAAGJ,MAAM,CAACK,KAAK,CAACF,CAAC,CAAC;IAChC,MAAMG,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,GAAGF,QAAQ,CAAC;IACjC,MAAMI,QAAQ,GAAGR,MAAM,CAACS,SAAS,CAAEC,GAAG,IAAKA,GAAG,KAAKJ,GAAG,CAAC;IAEvDN,MAAM,CAACG,CAAC,CAAC,GAAGG,GAAG;IACfN,MAAM,CAACQ,QAAQ,CAAC,GAAGN,UAAU;EAC/B,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,OAAOF,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}